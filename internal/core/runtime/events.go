package runtime

// EventType RuntimeEventType represents the category of a runtime event emitted by the
// agent loop. The names map to the event payload types produced by the
// TypeScript implementation, so consumers can react in the same fashion.
type EventType string

const (
	// EventTypeStatus signals general state changes or status updates.
	EventTypeStatus EventType = "status"
	// EventTypeAssistantMessage represents a message generated by the agent.
	EventTypeAssistantMessage EventType = "assistant_message"
	// EventTypeError is emitted when the runtime hits an unrecoverable error.
	EventTypeError EventType = "error"
	// EventTypeRequestInput notifies the host that the runtime is ready to
	// receive further input from the user or automation harness.
	EventTypeRequestInput EventType = "request_input"
)

// StatusLevel mirrors the severity levels surfaced by the TypeScript runtime.
// It allows callers to format the output in a human friendly way while keeping
// the Go implementation loosely coupled from presentation concerns.
type StatusLevel string

const (
	// StatusLevelInfo is the default status level for informational events.
	StatusLevelInfo StatusLevel = "info"
	// StatusLevelWarn signals a potential issue that did not stop execution.
	StatusLevelWarn StatusLevel = "warn"
	// StatusLevelError marks fatal issues that will tear down the runtime.
	StatusLevelError StatusLevel = "error"
)

// RuntimeEvent is the cross-language payload for messages flowing out of the
// runtime. The structure stays intentionally small to keep it easy to consume
// from CLIs, HTTP handlers or tests.
type RuntimeEvent struct {
	Type     EventType      `json:"type"`
	Message  string         `json:"message"`
	Level    StatusLevel    `json:"level,omitempty"`
	Metadata map[string]any `json:"metadata,omitempty"`
	Pass     int            `json:"pass"`
	Agent    string         `json:"agent"`
}

// InputEventType distinguishes the different kinds of inputs that can be
// pushed into the runtime input queue.
type InputEventType string

const (
	// InputTypePrompt represents a user message that should be processed by
	// the agent. This maps to the `prompt` input of the TypeScript runtime.
	InputTypePrompt InputEventType = "prompt"
	// InputTypeCancel requests that the current operation is canceled.
	InputTypeCancel InputEventType = "cancel"
	// InputTypeShutdown initiates a graceful shutdown of the runtime.
	InputTypeShutdown InputEventType = "shutdown"
)

// InputEvent is the public payload that can be enqueued on the runtime input
// queue. When Type is InputTypePrompt the Prompt field carries the actual user
// message. Reason can be used to describe the origin of a cancel or shutdown
// request.
type InputEvent struct {
	Type   InputEventType
	Prompt string
	Reason string
}
